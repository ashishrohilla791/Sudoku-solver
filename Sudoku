#include<stdio.h>
#include<stdbool.h>

#define N 9
void printgrid(int grid[N][N]) //to print current grid
{
    for(int row=0;row<N;row++)
    {
        for(int col=0;col<N;col++)
        {
            printf("%2d",grid[row][col]);
        }
        printf("\n");
    }
    printf("\n");
}

bool findemptyspace(int grid[N][N],int*row,int*col)  //to find empty space
{
    for(*row=0;*row<N;(*row)++)
    {
        for(*col=0;*col<N;(*col)++)
        {
            if(grid[*row][*col]==0)
            {
                return true;
            }
        }
    }
    return false;
}

//to check number is safe or not
bool safe(int grid[N][N],int row,int col,int num)
{
    for(int x=0;x<N;x++)
    {
        if( grid[row][x]==num || grid[x][col] == num)
        {
            return false;
        }
    }
    int startrow = row-row % 3;int startcol = col-col % 3;
    for(int i = 0; i < 3; i++)
    {
        for(int j=0;j<3;j++)
        {
            if(grid[i+startrow][j+startcol]==num)
            {
                return false;
            }
        }
    }
    return true;
}

bool solvesudoku(int grid[N][N])
{
    int row,col;
    if(!findemptyspace(grid,&row,&col))
    {
        return true; //means no space is there so sudoku is solved
    }
    for(int num=1;num<=9;num++)
    {
        if(safe(grid,row,col,num))
        {
            grid[row][col]=num;
            if(solvesudoku(grid))
            {
            return true;
            }
            grid[row][col]=0;  //backtrack or undo the move
        }
        
    }
    return false;
}
int main()
{
    int grid[N][N]={
        {0,2,0,0,8,0,0,9,0},
        {9,0,0,4,1,0,7,0,8},
        {0,3,8,0,0,0,0,0,0},
        {6,0,5,0,4,3,0,0,0},
        {0,7,0,0,0,0,0,4,0},
        {0,0,0,5,2,0,3,0,1},
        {0,0,0,0,0,0,9,8,0},
        {2,0,3,0,9,1,0,0,6},
        {0,6,0,0,5,0,0,1,0}
    };
    if(solvesudoku(grid))
    {
        printgrid(grid); 
    }
    else
    {
        printf("No solution exists");
    }
    return 0;
}
